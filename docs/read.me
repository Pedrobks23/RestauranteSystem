# Sistema de Restaurante - Backend

Este projeto implementa um sistema completo de restaurante com funcionalidades como cadastro de clientes, reservas, pedidos, gerenciamento de garÃ§ons, mesas e cardÃ¡pio. O backend foi construÃ­do com Node.js e banco de dados MySQL, seguindo a arquitetura DAOâ€“Serviceâ€“Controller.

---

## âœ¨ Tecnologias Utilizadas

* **Node.js**
* **Express**
* **MySQL**
* **mysql2/promise**
* **Thunder Client (para testes)**

---

## ğŸ“‚ Estrutura de Pastas

```
backend/
â”œâ”€â”€ config/
â”œâ”€â”€ controller/
â”œâ”€â”€ dao/
â”œâ”€â”€ model/
â”œâ”€â”€ routes/
â”œâ”€â”€ service/
â””â”€â”€ server.js
```

---

## ğŸ“ƒ Entidades e Funcionalidades

### Cliente

* Cadastro, listagem, ediÃ§Ã£o, remoÃ§Ã£o
* Campos: nome, telefone, email, senha

### Restaurante

* Cadastro, gerenciamento de mesas, cardÃ¡pio e garÃ§ons

### Mesa

* Vinculada a um restaurante
* Campos: nÃºmero, capacidade, status (ocupada/disponÃ­vel)

### GarÃ§om

* Vinculado a um restaurante
* Pode ser vinculado a mesas

### Reserva

* Cliente escolhe restaurante e faz reserva de uma mesa para um horÃ¡rio

### Pedido

* Criado pelo garÃ§om para uma mesa
* Possui status (aberto/finalizado) e data
* Ao ser finalizado, libera a mesa automaticamente

### CardÃ¡pio

* Gerenciado pelo restaurante
* Campos: nome, preÃ§o, id\_restaurante

### Item do Pedido

* Tabela intermediÃ¡ria entre pedido e cardÃ¡pio
* Campos: id\_pedido, id\_item, quantidade

### AssociaÃ§Ã£o GarÃ§om-Mesa

* Permite definir quais mesas cada garÃ§om atende

---

## ğŸš© Rotas Principais

### Clientes

* `POST /api/clientes`
* `GET /api/clientes`
* `PUT /api/clientes/:id`
* `DELETE /api/clientes/:id`

### Restaurantes

* `POST /api/restaurantes`
* `GET /api/restaurantes`

### Mesas

* `POST /api/mesas`
* `GET /api/mesas`

### GarÃ§ons

* `POST /api/garcons`
* `GET /api/garcons`

### Reservas

* `POST /api/reservas`
* `GET /api/reservas`

### Pedidos

* `POST /api/pedidos`
* `PATCH /api/pedidos/:id/finalizar`

### CardÃ¡pio

* `POST /api/cardapio`
* `GET /api/cardapio`

### Itens do Pedido

* `POST /api/pedidos/:idPedido/itens`
* `GET /api/pedidos/:idPedido/itens`
* `DELETE /api/pedidos/item/:idItemPedido`

### GarÃ§om-Mesa

* `POST /api/garcons/:idGarcom/mesas/:idMesa`
* `GET /api/garcons/:idGarcom/mesas`
* `DELETE /api/garcons/:idGarcom/mesas/:idMesa`

---

## ğŸ’¼ Como Rodar o Projeto

1. Instale as dependÃªncias:

```bash
npm install
```

2. Configure seu banco MySQL com o nome `RESTAURANTE`.

3. Crie as tabelas usando os scripts SQL fornecidos nos arquivos `.sql` ou na pasta `database/`.

4. Inicie o servidor:

```bash
node backend/server.js
```
cors
5. Teste as rotas com Thunder Client ou Postman.

---

## ğŸ“„ DocumentaÃ§Ã£o Complementar

* Todos os mÃ³dulos seguem padrÃ£o **DAO-Service-Controller**.
* O projeto garante **integridade referencial** entre as tabelas.
* Toda interaÃ§Ã£o com o banco utiliza **prepared statements com mysql2/promise**.
* Os dados foram testados com Thunder Client e estÃ£o prontos para integraÃ§Ã£o com o frontend em HTML/JavaScript puro.

---

Sistema 100% funcional. Pronto para apresentaÃ§Ã£o e expansÃ£o com frontend ou integraÃ§Ã£o real.
